---
layout: page
weight: 100
title: Subusers API
seo:
  description: Create and Manage your subusers via the SendGrid v3 API
  title: Subusers API
navigation:
  show: true
---
FORMAT: 1A

# Subusers
Subusers resource

# Group Subusers
Subsers belonging to a parent user.

## Subusers Collection [/subusers?username={username}&limit={limit}&offset={offset}]

### List all Subusers for a parent [GET]

+ Parameters

    + limit (optional, number, `20`) ... Number of subusers to return.
    + offset (optional, number, `1`) ... Paging offset.
    + username (optional, string, `John`) ... The subuser to search for

+ Response 200 (application/json)

    + Body

            [{
              "id": 1, "username": "Test@example.com", "email": "Test@example.com"
            }, {
              "id": 2, "username": "John@example.com", "email": "John@example.com"
            }]

+ Response 401 (application/json)

    + Body

            {
              "errors":[
                {
                  "field": null,
                  "message": "authorization required"}
              ]
            }

## Subusers Collection [/subusers]
### Create Subuser [POST]

+ Request (application/json)

    + Body

            {
                "username": "John@example.com",
                "email": "John@example.com",
                "password": "johns_password",
                "ips": ["1.1.1.1", "2.2.2.2"]
            }

+ Response 201 (application/json)

    + Body

            {
                "username": "John@example.com",
                "email": "John@example.com",
                "password": "johns_password",
                "ips": ["1.1.1.1", "2.2.2.2"]
            }

## Subuser Item [/subusers/{subuser_name}]
### Enable/disable a subuser [PATCH]

+ Request (application/json)

    + Body

            {
                "disabled": false
            }

+ Response 204 (application/json)

### Delete a subuser [DELETE]

+ Response 204 (application/json)

## Subusers Monitor [/subusers/{subuser_name}/monitor]

+ Parameters

    + subuser_name (required, string, `my_subuser`) ... The subuser's username

### Retrieve monitor settings [GET]

+ Response 200 (application/json)

    + Body

            {
                "email": "test@example.com",
                "frequency": 500
            }

### Create monitor settings [POST]

+ Request (application/json)

    + Body

            {
                "email": "test@example.com",
                "frequency": 500
            }

+ Response 200 (application/json)

    + Body

            {
                "email": "test@example.com",
                "frequency": 500
            }

### Update monitor settings [PUT]

+ Request (application/json)

    + Body

            {
                "email": "test@example.com",
                "frequency": 500
            }

+ Response 200 (application/json)

    + Body

            {
                "email": "test@example.com",
                "frequency": 500
            }

### Delete monitor settings [DELETE]

+ Response 204


## Subuser Reputations [/subusers/reputations?usernames={usernames}&usernames={usernames}]

+ Parameters

    + usernames (required, string, `my_subuser`) ... Array of string. The usernames of subusers to retrieve the reputations of.

### Retrieve Subuser Reputations [GET]

+ Response 200

    + Body

            [
                {"username": "user1", "reputation": 99.0},
                {"username": "user2", "reputation": 95.2}
            ]


## Subuser IPs [/subusers/{subuser_name}/ips]

+ Parameters

    + subuser_name (required, string, `my_subuser`) ... The subuser's username

### Update IPs assigned to a subuser [PUT]

+ Request (application/json)

    + Body

            [
                "127.0.0.1",
                "127.0.0.2"
            ]

+ Response 200 (application/json)

    + Body

            {
                "ips":[
                    "127.0.0.1",
                    "127.0.0.2"
                ]
            }
